from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from services.api_client import (
    create_date_proposal, 
    respond_to_proposal, 
    get_date_history,
    get_user_by_telegram_id,
    get_user_couple
)
from keyboards.inline import proposal_response_keyboard

router = Router()

class DateStates(StatesGroup):
    idea_choice = State()
    date_choice = State()

@router.message(F.text == "/date_propose")
async def date_propose_start(message: Message, state: FSMContext):
    await state.set_state(DateStates.idea_choice)
    await message.answer("–í–≤–µ–¥–∏ ID –∏–¥–µ–∏ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–≤–∏–¥–∞–Ω–∏—è:")

@router.message(DateStates.idea_choice)
async def date_propose_send(message: Message, state: FSMContext):
    try:
        idea_id = int(message.text)
        await state.update_data(idea_id=idea_id)
        await state.set_state(DateStates.date_choice)
        await message.answer("–ù–∞–ø–∏—à–∏ –¥–∞—Ç—É —Å–≤–∏–¥–∞–Ω–∏—è (YYYY-MM-DD HH:MM):")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–¥–µ–∏ (—á–∏—Å–ª–æ):")

@router.callback_query(F.data.startswith("propose_idea_"))
async def propose_idea_handler(callback: CallbackQuery, state: FSMContext):
    try:
        idea_id = int(callback.data.split("_")[2])  
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_data = await get_user_by_telegram_id(callback.from_user.id)
        user_id = user_data["id"]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–µ
        couple_data = await get_user_couple(user_id)
        couple_id = couple_data["id"]
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–≤–∏–¥–∞–Ω–∏—è
        await create_date_proposal(
            couple_id=couple_id,
            idea_id=idea_id,
            proposer_id=user_id
        )
        
        await callback.message.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ")
        await callback.answer()
        
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {str(e)}")
        await callback.answer()

@router.message(F.text == "/date_history")
async def date_history(message: Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_data = await get_user_by_telegram_id(message.from_user.id)
        user_id = user_data["id"]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–µ
        couple_data = await get_user_couple(user_id)
        couple_id = couple_data["id"]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–≤–∏–¥–∞–Ω–∏–π
        history = await get_date_history(couple_id)
        
        if not history:
            return await message.answer("–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Å–≤–∏–¥–∞–Ω–∏–π.")
        
        for evt in history:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            idea_title = evt.get("idea", {}).get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–¥–µ—è")
            scheduled_date = evt.get("scheduled_date", "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
            date_status = evt.get("date_status", "pending")
            
            text = (
                f"üíï {idea_title}\n"
                f"üìÖ {scheduled_date}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {date_status}"
            )
            
            if date_status == "pending":
                await message.answer(text, reply_markup=proposal_response_keyboard(evt["id"]))
            else:
                await message.answer(text)
                
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")

@router.callback_query(F.data.startswith("accept_"))
async def date_accept_handler(callback: CallbackQuery):
    try:
        event_id = int(callback.data.split("_")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_data = await get_user_by_telegram_id(callback.from_user.id)
        user_id = user_data["id"]
        
        await respond_to_proposal(event_id, "accepted", user_id)
        await callback.message.answer("–í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ‚úÖ")
        await callback.answer()
        
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {str(e)}")
        await callback.answer()

@router.callback_query(F.data.startswith("reject_"))
async def date_reject_handler(callback: CallbackQuery):
    try:
        event_id = int(callback.data.split("_")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_data = await get_user_by_telegram_id(callback.from_user.id)
        user_id = user_data["id"]
        
        await respond_to_proposal(event_id, "rejected", user_id)
        await callback.message.answer("–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ‚ùå")
        await callback.answer()
        
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {str(e)}")
        await callback.answer()

@router.callback_query(F.data.startswith("details_"))
async def date_details_handler(callback: CallbackQuery):
    try:
        event_id = int(callback.data.split("_")[1])
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±—ã—Ç–∏–∏
        # event_data = await get_date_event(event_id)
        
        await callback.answer("–î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è", show_alert=True)
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)