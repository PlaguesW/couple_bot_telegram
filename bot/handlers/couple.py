from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from loguru import logger

from api_client import api_client, APIError
from states import CoupleStates
from keyboards.inline import (
    couple_setup_keyboard, 
    main_menu_keyboard, 
    couple_info_keyboard,
    confirmation_keyboard,
    back_keyboard
)
from keyboards.reply import cancel_keyboard

router = Router()


@router.callback_query(F.data == "create_couple")
async def create_couple_callback(callback: CallbackQuery, user: dict, has_couple: bool, **kwargs):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞—Ä—É"""
    await callback.answer()
    
    if has_couple:
        await callback.message.edit_text(
            "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–∞—Ä–∞! –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∏–Ω—å—Ç–µ —Ç–µ–∫—É—â—É—é –ø–∞—Ä—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é.",
            reply_markup=back_keyboard()
        )
        return
    
    try:
        async with api_client:
            couple_data = await api_client.create_couple(user["id"])
        
        invite_code = couple_data["invite_code"]
        
        await callback.message.edit_text(
            f"‚úÖ –ü–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"üîó **–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:** `{invite_code}`\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ —Å–≤–æ–µ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø–∞—Ä–µ.\n\n"
            f"üí° –ö–æ–¥ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ \"üë´ –ú–æ—è –ø–∞—Ä–∞\"",
            reply_markup=main_menu_keyboard(),
            parse_mode="Markdown"
        )
        
    except APIError as e:
        logger.error(f"Error creating couple: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=couple_setup_keyboard()
        )


@router.callback_query(F.data == "join_couple")
async def join_couple_callback(callback: CallbackQuery, state: FSMContext, user: dict, has_couple: bool, **kwargs):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø–∞—Ä–µ"""
    await callback.answer()
    
    if has_couple:
        await callback.message.edit_text(
            "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–∞—Ä–∞! –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∏–Ω—å—Ç–µ —Ç–µ–∫—É—â—É—é –ø–∞—Ä—É, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–æ–≤–æ–π.",
            reply_markup=back_keyboard()
        )
        return
    
    await callback.message.edit_text(
        "üîó –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞:\n\n"
        "–ö–æ–¥ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 6 —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ABC123)",
        reply_markup=back_keyboard()
    )
    await state.set_state(CoupleStates.waiting_for_invite_code)


@router.message(StateFilter(CoupleStates.waiting_for_invite_code))
async def process_invite_code(message: Message, state: FSMContext, user: dict, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    invite_code = message.text.strip().upper()
    
    if len(invite_code) != 6:
        await message.answer("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞—Ä–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º
        async with api_client:
            couple_data = await api_client.get_couple_by_code(invite_code)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–∞ –Ω–µ –ø–æ–ª–Ω–∞—è
        if couple_data.get("user2_id"):
            await message.answer(
                "‚ùå –≠—Ç–∞ –ø–∞—Ä–∞ —É–∂–µ –ø–æ–ª–Ω–∞—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥:",
                reply_markup=back_keyboard()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–≤–æ–µ–π –∂–µ –ø–∞—Ä–µ
        if couple_data.get("user1_id") == user["id"]:
            await message.answer(
                "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–≤–æ–µ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–∞—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥:",
                reply_markup=back_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await state.update_data(invite_code=invite_code)
        
        await message.answer(
            f"‚úÖ –ü–∞—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞!\n\n"
            f"üîó –ö–æ–¥: {invite_code}\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —ç—Ç–æ–π –ø–∞—Ä–µ?",
            reply_markup=confirmation_keyboard("join_couple", invite_code)
        )
        await state.set_state(CoupleStates.waiting_for_confirmation)
        
    except APIError as e:
        if "404" in str(e):
            await message.answer(
                "‚ùå –ü–∞—Ä–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=back_keyboard()
            )
        else:
            logger.error(f"Error checking invite code: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=couple_setup_keyboard()
            )


@router.callback_query(F.data.startswith("confirm_join_couple"))
async def confirm_join_couple(callback: CallbackQuery, state: FSMContext, user: dict, **kwargs):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –ø–∞—Ä–µ"""
    await callback.answer()
    
    data = await state.get_data()
    invite_code = data.get("invite_code")
    
    if not invite_code:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=couple_setup_keyboard()
        )
        await state.clear()
        return
    
    try:
        async with api_client:
            couple_data = await api_client.join_couple(user["id"], invite_code)
        
        await callback.message.edit_text(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ø–∞—Ä–µ!\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            f"‚Ä¢ üí° –ü–æ–ª—É—á–∞—Ç—å –∏–¥–µ–∏ –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏–π\n"
            f"‚Ä¢ üíï –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Å–≤–∏–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä—É\n"
            f"‚Ä¢ üìö –í–µ—Å—Ç–∏ –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–∏—Ö —Å–≤–∏–¥–∞–Ω–∏–π\n\n"
            f"–£–¥–∞—á–Ω—ã—Ö —Å–≤–∏–¥–∞–Ω–∏–π! üíï",
            reply_markup=main_menu_keyboard()
        )
        
        await state.clear()
        
    except APIError as e:
        logger.error(f"Error joining couple: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –ø–∞—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=couple_setup_keyboard()
        )
        await state.clear()


@router.callback_query(F.data.startswith("cancel_join_couple"))
async def cancel_join_couple(callback: CallbackQuery, state: FSMContext, **kwargs):
    """–û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –ø–∞—Ä–µ"""
    await callback.answer()
    
    await callback.message.edit_text(
        "‚ùå –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –ø–∞—Ä–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=couple_setup_keyboard()
    )
    await state.clear()


@router.callback_query(F.data == "couple_info")
async def couple_info_callback(callback: CallbackQuery, couple: dict, **kwargs):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–µ"""
    await callback.answer()
    
    try:
        async with api_client:
            couple_data = await api_client.get_couple(couple["id"])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞—Ö
        user1_name = couple_data.get("user1", {}).get("name", "–ü–∞—Ä—Ç–Ω–µ—Ä 1")
        user2_name = couple_data.get("user2", {}).get("name", "–ü–∞—Ä—Ç–Ω–µ—Ä 2") if couple_data.get("user2") else "–û–∂–∏–¥–∞–Ω–∏–µ..."
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        async with api_client:
            history = await api_client.get_date_history(couple["id"], limit=100)
        
        completed_dates = len([d for d in history if d.get("date_status") == "completed"])
        pending_dates = len([d for d in history if d.get("date_status") == "pending"])
        
        created_date = couple_data.get("created_at", "").split("T")[0] if couple_data.get("created_at") else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        info_text = f"""
üë´ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–µ**

**–£—á–∞—Å—Ç–Ω–∏–∫–∏:**
‚Ä¢ {user1_name}
‚Ä¢ {user2_name}

**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ üìÖ –°–æ–∑–¥–∞–Ω–∞: {created_date}
‚Ä¢ ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–≤–∏–¥–∞–Ω–∏—è: {completed_dates}
‚Ä¢ ‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {pending_dates}
‚Ä¢ üìä –í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {len(history)}

**–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:** `{couple_data.get('invite_code', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}`
        """
        
        await callback.message.edit_text(
            info_text,
            reply_markup=couple_info_keyboard(couple["id"]),
            parse_mode="Markdown"
        )
        
    except APIError as e:
        logger.error(f"Error getting couple info: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä–µ.",
            reply_markup=back_keyboard()
        )


@router.callback_query(F.data.startswith("couple_stats_"))
async def couple_stats_callback(callback: CallbackQuery, couple: dict, **kwargs):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—ã"""
    await callback.answer()
    
    try:
        async with api_client:
            history = await api_client.get_date_history(couple["id"], limit=100)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_proposals = len(history)
        completed_dates = len([d for d in history if d.get("date_status") == "completed"])
        accepted_dates = len([d for d in history if d.get("date_status") == "accepted"])
        rejected_dates = len([d for d in history if d.get("date_status") == "rejected"])
        pending_dates = len([d for d in history if d.get("date_status") == "pending"])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for event in history:
            if event.get("idea") and event.get("idea").get("category"):
                category = event["idea"]["category"]
                if category not in categories:
                    categories[category] = 0
                categories[category] += 1
        
        # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        top_categories = sorted(categories.items(), key=lambda x: x[1], reverse=True)[:3]
        
        stats_text = f"""
üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—ã**

**–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
‚Ä¢ üìù –í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {total_proposals}
‚Ä¢ ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–≤–∏–¥–∞–Ω–∏–π: {completed_dates}
‚Ä¢ üíï –ü—Ä–∏–Ω—è—Ç—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {accepted_dates}
‚Ä¢ ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {rejected_dates}
‚Ä¢ ‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–≤–µ—Ç–∞: {pending_dates}

**–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:**
        """
        
        for i, (category, count) in enumerate(top_categories, 1):
            stats_text += f"{i}. {category}: {count} —Ä–∞–∑\n"
        
        if completed_dates > 0:
            success_rate = (completed_dates / total_proposals) * 100 if total_proposals > 0 else 0
            stats_text += f"\nüéØ **–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–≤–∏–¥–∞–Ω–∏–π:** {success_rate:.1f}%"
        
        await callback.message.edit_text(
            stats_text,
            reply_markup=back_keyboard("couple_info"),
            parse_mode="Markdown"
        )
        
    except APIError as e:
        logger.error(f"Error getting couple stats: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
            reply_markup=back_keyboard("couple_info")
        )


@router.callback_query(F.data.startswith("invite_code_"))
async def invite_code_callback(callback: CallbackQuery, couple: dict, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    await callback.answer()
    
    try:
        async with api_client:
            couple_data = await api_client.get_couple(couple["id"])
        
        invite_code = couple_data.get("invite_code")
        
        await callback.message.edit_text(
            f"üîó **–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤–∞—à–µ–π –ø–∞—Ä—ã:**\n\n"
            f"`{invite_code}`\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –ø–∞—Ä—Ç–Ω–µ—Ä—É, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø–∞—Ä–µ.\n\n"
            f"üí° –ö–æ–¥ –º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å, –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–µ–≥–æ.",
            reply_markup=back_keyboard("couple_info"),
            parse_mode="Markdown"
        )
        
    except APIError as e:
        logger.error(f"Error getting invite code: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.",
            reply_markup=back_keyboard("couple_info")
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä
@router.message(F.text == "üë´ –ú–æ—è –ø–∞—Ä–∞")
async def couple_info_message(message: Message, couple: dict, **kwargs):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–µ —á–µ—Ä–µ–∑ Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∫–æ–¥, —á—Ç–æ –∏ –≤ callback
    fake_callback = type('obj', (object,), {
        'answer': lambda: None,
        'message': message,
        'from_user': message.from_user
    })()
    
    await couple_info_callback(fake_callback, couple=couple, **kwargs)


@router.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É")
async def create_couple_message(message: Message, user: dict, has_couple: bool, **kwargs):
    """–°–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É —á–µ—Ä–µ–∑ Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    if has_couple:
        await message.answer(
            "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–∞—Ä–∞! –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∏–Ω—å—Ç–µ —Ç–µ–∫—É—â—É—é –ø–∞—Ä—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é.",
            reply_markup=back_keyboard()
        )
        return
    
    try:
        async with api_client:
            couple_data = await api_client.create_couple(user["id"])
        
        invite_code = couple_data["invite_code"]
        
        await message.answer(
            f"‚úÖ –ü–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"üîó **–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:** `{invite_code}`\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ —Å–≤–æ–µ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø–∞—Ä–µ.\n\n"
            f"üí° –ö–æ–¥ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ \"üë´ –ú–æ—è –ø–∞—Ä–∞\"",
            reply_markup=main_menu_keyboard(),
            parse_mode="Markdown"
        )
        
    except APIError as e:
        logger.error(f"Error creating couple: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=couple_setup_keyboard()
        )


@router.message(F.text == "üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è")
async def join_couple_message(message: Message, state: FSMContext, user: dict, has_couple: bool, **kwargs):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø–∞—Ä–µ —á–µ—Ä–µ–∑ Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    if has_couple:
        await message.answer(
            "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–∞—Ä–∞! –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∏–Ω—å—Ç–µ —Ç–µ–∫—É—â—É—é –ø–∞—Ä—É, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–æ–≤–æ–π.",
            reply_markup=back_keyboard()
        )
        return
    
    await message.answer(
        "üîó –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞:\n\n"
        "–ö–æ–¥ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 6 —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ABC123)",
        reply_markup=cancel_keyboard()
    )
    await state.set_state(CoupleStates.waiting_for_invite_code)