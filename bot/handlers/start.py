from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from loguru import logger

from api_client import api_client, APIError
from states import RegistrationStates
from keyboards.inline import main_menu_keyboard, couple_setup_keyboard
from keyboards.reply import registration_keyboard, main_menu_reply, cancel_keyboard

router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message, is_registered: bool, user_info: dict = None, **kwargs):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    if is_registered:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
            reply_markup=main_menu_keyboard()
        )
    else:
        await message.answer(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Couple Bot!\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–∏–¥–∞–Ω–∏—è –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è –≤–º–µ—Å—Ç–µ —Å–æ —Å–≤–æ–µ–π –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–∫–æ–π.\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è:",
            reply_markup=registration_keyboard()
        )


@router.message(F.text == "üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
async def start_registration(message: Message, state: FSMContext, is_registered: bool, **kwargs):
    """–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"""
    if is_registered:
        await message.answer(
            "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!",
            reply_markup=main_menu_keyboard()
        )
        return
    
    await message.answer(
        "üë§ –î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!\n\n"
        "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=cancel_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_name)


@router.message(StateFilter(RegistrationStates.waiting_for_name), F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
async def process_name(message: Message, state: FSMContext, user_info: dict, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è"""
    name = message.text.strip()
    
    if len(name) < 2:
        await message.answer("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    if len(name) > 50:
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with api_client:
            user_data = await api_client.register_user(
                telegram_id=user_info["telegram_id"],
                name=name,
                username=user_info["username"]
            )
        
        await message.answer(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, {name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–∞–º –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π:",
            reply_markup=couple_setup_keyboard()
        )
        
        await state.clear()
        
    except APIError as e:
        logger.error(f"Registration error: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=registration_keyboard()
        )
        await state.clear()


@router.message(StateFilter(RegistrationStates.waiting_for_name), F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_registration(message: Message, state: FSMContext, **kwargs):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"""
    await message.answer(
        "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=registration_keyboard()
    )
    await state.clear()


@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery, is_registered: bool, has_couple: bool, **kwargs):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.answer()
    
    if not is_registered:
        await callback.message.edit_text(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Couple Bot!\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–∏–¥–∞–Ω–∏—è –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è –≤–º–µ—Å—Ç–µ —Å–æ —Å–≤–æ–µ–π –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–∫–æ–π.\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è:",
            reply_markup=registration_keyboard()
        )
    elif not has_couple:
        await callback.message.edit_text(
            "üë´ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–∞—Ä–∞!\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –ø–∞—Ä—É –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π:",
            reply_markup=couple_setup_keyboard()
        )
    else:
        await callback.message.edit_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
            reply_markup=main_menu_keyboard()
        )


@router.message(Command("help"))
async def cmd_help(message: Message, **kwargs):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = """
ü§ñ **Couple Bot - –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–∞—Ä**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/menu - –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1. üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –±–æ—Ç–µ
2. üë´ –°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä—É –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
3. üí° –ü–æ–ª—É—á–∞–π—Ç–µ –∏–¥–µ–∏ –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏–π
4. üíï –ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ —Å–≤–∏–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä—É
5. üìö –í–µ–¥–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–∏—Ö —Å–≤–∏–¥–∞–Ω–∏–π

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∏–¥–µ–∏ –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏–π
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö —Å–≤–∏–¥–∞–Ω–∏–π
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–µ–π –ø–∞—Ä—ã
‚Ä¢ –†–∞–∑–ª–∏—á–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–ø–∏—à–∏—Ç–µ /support
    """
    
    await message.answer(help_text, parse_mode="Markdown")


@router.message(Command("menu"))
async def cmd_menu(message: Message, is_registered: bool, has_couple: bool, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    if not is_registered:
        await message.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –±–æ—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /start"
        )
        return
    
    if not has_couple:
        await message.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä—É –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π",
            reply_markup=couple_setup_keyboard()
        )
        return
    
    await message.answer(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=main_menu_keyboard()
    )


@router.callback_query(F.data == "help")
async def help_callback(callback: CallbackQuery, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å —á–µ—Ä–µ–∑ callback"""
    await callback.answer()
    
    help_text = """
ü§ñ **Couple Bot - –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–∞—Ä**

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ üí° –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–π –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
‚Ä¢ üíï –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–≤–∏–¥–∞–Ω–∏–π –ø–∞—Ä—Ç–Ω–µ—Ä—É
‚Ä¢ üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
‚Ä¢ üìö –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö —Å–≤–∏–¥–∞–Ω–∏–π –ø–∞—Ä—ã
‚Ä¢ üë´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–π –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

**–ö–∞–∫ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–∏–¥–∞–Ω–∏–µ:**
1. –ù–∞–∂–º–∏—Ç–µ "üíï –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–∏–¥–∞–Ω–∏–µ"
2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
3. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à—É—é—Å—è –∏–¥–µ—é
4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ

**–ö–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:**
‚Ä¢ –ó–∞—Ö–æ–¥–∏—Ç–µ –≤ "üìã –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ –ü—Ä–∏–Ω–∏–º–∞–π—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è–π—Ç–µ

–£–¥–∞—á–Ω—ã—Ö —Å–≤–∏–¥–∞–Ω–∏–π! üíï
    """
    
    await callback.message.edit_text(help_text, parse_mode="Markdown")


@router.callback_query(F.data == "about")
async def about_callback(callback: CallbackQuery, **kwargs):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
    await callback.answer()
    
    about_text = """
ü§ñ **Couple Bot v1.0**

–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–∏–¥–∞–Ω–∏–π –∏ —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π.

**–°–æ–∑–¥–∞–Ω –¥–ª—è:**
‚Ä¢ –ü–∞—Ä, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—Ç—å —Å–≤–æ–∏ —Å–≤–∏–¥–∞–Ω–∏—è
‚Ä¢ –¢–µ—Ö, –∫—Ç–æ –∏—â–µ—Ç –Ω–æ–≤—ã–µ –∏–¥–µ–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –≤—Ä–µ–º—è–ø—Ä–µ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É—á–µ—Ç–∞ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤

**–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:**
‚Ä¢ Python + aiogram 3.x
‚Ä¢ FastAPI Backend
‚Ä¢ PostgreSQL Database

**–í–µ—Ä—Å–∏—è:** 1.0.0
**–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:** @your_username

üíï –ñ–µ–ª–∞–µ–º –≤–∞–º –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã—Ö —Å–≤–∏–¥–∞–Ω–∏–π!
    """
    
    await callback.message.edit_text(about_text, parse_mode="Markdown")