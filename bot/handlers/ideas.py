from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from states import IdeaStates, DateProposalStates
from services.api_client import (
    get_ideas, add_idea, update_idea, delete_idea, get_random_idea,
    get_user_by_telegram_id, get_user_couple, create_date_proposal
)
from keyboards.inline import idea_action_keyboard
from loguru import logger
import random

router = Router()

@router.message(F.text == "/ideas")
async def show_ideas(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏–¥–µ–∏"""
    try:
        ideas = await get_ideas()
        if not ideas:
            return await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∏–¥–µ–π üòî")
        
        for idea in ideas:
            await message.answer(
                f"üìù *{idea['title']}*\n{idea['description']}",
                parse_mode="Markdown",
                reply_markup=idea_action_keyboard(idea_id=idea['id'])
            )
    except Exception as e:
        logger.error(f"Error getting ideas: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–¥–µ–π üòî")

@router.callback_query(F.data.startswith("idea_"))
async def idea_action_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –∏–¥–µ—è–º–∏"""
    try:
        action, idea_id = callback.data.split('_', 1)
        await state.update_data(idea_id=int(idea_id))
        
        if action == "idea_edit":
            await state.set_state(IdeaStates.creating_title)
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:")
        elif action == "idea_delete":
            await delete_idea(int(idea_id))
            await callback.message.answer("–ò–¥–µ—è —É–¥–∞–ª–µ–Ω–∞ ‚úÖ")
        elif action == "idea_like":
            await callback.message.edit_text("‚ù§Ô∏è –ò–¥–µ—è –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å!")
        elif action == "idea_dislike":
            await callback.message.edit_text("üëé –ò–¥–µ—è –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å")
        elif action == "idea_create_date":
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–≤–∏–¥–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–¥–µ–∏
            await create_date_from_idea(callback, int(idea_id))
        
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in idea action handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "get_idea")
async def get_random_idea_handler(callback: CallbackQuery):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∏–¥–µ—é –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏—è"""
    try:
        ideas = await get_ideas()
        if not ideas:
            await callback.message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∏–¥–µ–π üòî")
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∏–¥–µ—é
        random_idea = random.choice(ideas)
        
        await callback.message.answer(
            f"üí° *–ò–¥–µ—è –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏—è:*\n\n"
            f"üìù *{random_idea['title']}*\n"
            f"{random_idea['description']}",
            parse_mode="Markdown",
            reply_markup=idea_action_keyboard(idea_id=random_idea['id'])
        )
    except Exception as e:
        logger.error(f"Error getting random idea: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–¥–µ–∏ üòî")
    
    await callback.answer()

@router.callback_query(F.data == "suggest_date")
async def suggest_date_handler(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–∏–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—É"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_telegram_id(callback.from_user.id)
        if not user:
            await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        couple = await get_user_couple(user['id'])
        if not couple:
            await callback.message.answer("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –ø–∞—Ä–µ. –°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä—É –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–µ—Å—Ç—å –æ–±–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞)
        if not couple.get('user2_id'):
            await callback.message.answer("‚ùå –í–∞—à–∞ –ø–∞—Ä–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø–∞—Ä–µ.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(couple_id=couple['id'], user_id=user['id'])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–¥–µ–∏ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        ideas = await get_ideas()
        if not ideas:
            await callback.message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∏–¥–µ–π –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏—è üòî")
            return
        
        await state.set_state(DateProposalStates.selecting_idea)
        await callback.message.answer(
            "üíï –í—ã–±–µ—Ä–∏—Ç–µ –∏–¥–µ—é –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏—è:",
            reply_markup=await create_ideas_selection_keyboard(ideas)
        )
        
    except Exception as e:
        logger.error(f"Error in suggest_date_handler: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–≤–∏–¥–∞–Ω–∏—è üòî")
    
    await callback.answer()

@router.callback_query(F.data.startswith("select_idea_"), DateProposalStates.selecting_idea)
async def select_idea_for_date(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –∏–¥–µ—é –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–≤–∏–¥–∞–Ω–∏—è"""
    try:
        idea_id = int(callback.data.split('_')[-1])
        data = await state.get_data()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–≤–∏–¥–∞–Ω–∏—è
        proposal = await create_date_proposal(
            couple_id=data['couple_id'],
            idea_id=idea_id,
            proposer_id=data['user_id']
        )
        
        await callback.message.answer(
            "‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–≤–∏–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∞—Ä—Ç–Ω–µ—Ä—É!\n"
            "–û–Ω –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ."
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error selecting idea for date: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è üòî")
    
    await callback.answer()

@router.callback_query(F.data == "my_suggestions")
async def my_suggestions_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_telegram_id(callback.from_user.id)
        if not user:
            await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        couple = await get_user_couple(user['id'])
        if not couple:
            await callback.message.answer("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –ø–∞—Ä–µ.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        from services.api_client import get_date_history
        history = await get_date_history(couple['id'])
        
        if not history:
            await callback.message.answer("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å–≤–∏–¥–∞–Ω–∏–π.")
            return
        
        await callback.message.answer("üìã *–í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–≤–∏–¥–∞–Ω–∏–π:*", parse_mode="Markdown")
        
        for event in history:
            status_emoji = {
                'pending': '‚è≥',
                'accepted': '‚úÖ',
                'rejected': '‚ùå',
                'completed': 'üéâ'
            }.get(event.get('status', 'pending'), '‚ùì')
            
            await callback.message.answer(
                f"{status_emoji} *{event.get('idea_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–¥–µ—è')}*\n"
                f"üìù {event.get('idea_description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"
                f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {event.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"üîÑ –°—Ç–∞—Ç—É—Å: {event.get('status', 'pending')}",
                parse_mode="Markdown"
            )
    except Exception as e:
        logger.error(f"Error in my_suggestions_handler: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π üòî")
    
    await callback.answer()

async def create_date_from_idea(callback: CallbackQuery, idea_id: int):
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–≤–∏–¥–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–¥–µ–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_telegram_id(callback.from_user.id)
        if not user:
            await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        couple = await get_user_couple(user['id'])
        if not couple:
            await callback.message.answer("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –ø–∞—Ä–µ.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–≤–∏–¥–∞–Ω–∏—è
        proposal = await create_date_proposal(
            couple_id=couple['id'],
            idea_id=idea_id,
            proposer_id=user['id']
        )
        
        await callback.message.answer(
            "‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–≤–∏–¥–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–æ!\n"
            "–í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."
        )
        
    except Exception as e:
        logger.error(f"Error creating date from idea: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–≤–∏–¥–∞–Ω–∏—è üòî")

async def create_ideas_selection_keyboard(ideas):
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–¥–µ–π"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard = []
    for idea in ideas[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        keyboard.append([
            InlineKeyboardButton(
                text=f"üí° {idea['title'][:30]}...",
                callback_data=f"select_idea_{idea['id']}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_selection")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–¥–µ–π
@router.message(F.text == "/idea_add")
async def idea_add_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∏–¥–µ–∏"""
    await state.set_state(IdeaStates.creating_title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–¥–µ–∏:")

@router.message(IdeaStates.creating_title)
async def idea_add_desc(message: Message, state: FSMContext):
    """–í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –∏–¥–µ–∏"""
    await state.update_data(title=message.text)
    await state.set_state(IdeaStates.creating_description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∏:")

@router.message(IdeaStates.creating_description)
async def idea_add_category(message: Message, state: FSMContext):
    """–í–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–¥–µ–∏"""
    await state.update_data(description=message.text)
    await state.set_state(IdeaStates.creating_category)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–¥–µ–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ä–æ–º–∞–Ω—Ç–∏–∫–∞, –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è, –¥–æ–º):")

@router.message(IdeaStates.creating_category)
async def idea_add_send(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–¥–µ—é"""
    try:
        data = await state.get_data()
        await add_idea(data["title"], data["description"], message.text)
        await message.answer("–ò–¥–µ—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ")
    except Exception as e:
        logger.error(f"Error adding idea: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–¥–µ–∏ üòî")
    
    await state.clear()

@router.callback_query(F.data == "cancel_selection")
async def cancel_selection(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä"""
    await state.clear()
    await callback.message.answer("–í—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
    await callback.answer()